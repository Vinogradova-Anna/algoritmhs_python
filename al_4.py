"""Для этой задачи:
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему
2) оцените сложность каждого выражения в этих решениях в нотации О-большое
3) оцените итоговую сложность каждого решения в нотации О-большое
4) сделайте вывод, какое решение эффективнее и почему
Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
@@ -14,9 +15,10 @@
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.
Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Приложение должно давать ответы на эти вопросы
 и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
который вы придумаете, например, применить словарь.
Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""
####################################################
def is_no_active():
    dictionary = {
        'user1': ['jdjsc1', 1],
        'user2': ['efhv', 0],
        'user3': ['hefhgfvfe', 0],
        'user4': ['hefhvrdfe', 1],
        'user5': ['hefhv34fe', 0],
        'user6': ['hefhvjnfe', 1],
        'user7': ['hefhv65fe', 0],
        'user8': ['hefhvfnne', 1],
        'user9': ['hefhvfooe', 1],
        'user10': ['hefhvppfe', 1],
        'user11': ['hefhuuvfe', 1],
        'user12': ['hefhlk9vfe', 1],
        'user13': ['hefhujyvfe', 1]
    }
    val_1 = list(dictionary.items())            # константная О(1), тк присвоение
    for el in val_1:                            # проход О(n)
        if el[1][1] == 0:                       # сравнение О(n)
            print(f"{el[0]} , Вы желаете пройти аутентификацию?")

is_no_active()                                  #  в целом операция квадратичная, так как по мере вложенности растет и временная вложенность O(n^2)

